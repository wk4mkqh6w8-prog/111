import os
import logging
import asyncio
import threading
from datetime import datetime, timedelta

import requests
from dotenv import load_dotenv
from fastapi import FastAPI, Request
import uvicorn

from openai import OpenAI
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, ApplicationBuilder,
    CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters,
)

# ========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ========================
load_dotenv()

BOT_TOKEN     = os.getenv("BOT_TOKEN", "")
OPENAI_KEY    = os.getenv("OPENAI_KEY", "")
CRYPTOPAY_KEY = os.getenv("CRYPTOPAY_KEY")
ADMIN_ID      = os.getenv("ADMIN_ID")  # —Å—Ç—Ä–æ–∫–æ–π, –º–æ–∂–Ω–æ int(ADMIN_ID) –≥–¥–µ –Ω–∞–¥–æ
PORT          = int(os.getenv("PORT", "10000"))

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –ø—É—Å—Ç.")
if not OPENAI_KEY:
    raise RuntimeError("OPENAI_KEY –ø—É—Å—Ç.")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("neurobot")

client = OpenAI(api_key=OPENAI_KEY)

# –ë–î-—É—Ç–∏–ª–∏—Ç—ã (—á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º—è–≥–∫–æ)
from db import init_db, add_user, is_premium, can_send_message, set_premium  # noqa: E402
try:
    from db import record_payment  # async def record_payment(user_id, amount, asset, at: iso str)
except Exception:
    record_payment = None
try:
    from db import get_stats_today, get_totals  # –æ–±–µ async
except Exception:
    get_stats_today = None
    get_totals = None

# ========================
# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ========================
app = FastAPI(title="NeuroBot API")
application: Application | None = None
_public_url: str | None = None
_keepalive_stop = threading.Event()


# ========================
# GPT
# ========================
def ask_gpt(prompt: str) -> str:
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
    )
    return resp.choices[0].message.content


# ========================
# –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞
# ========================
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await add_user(user.id)

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üß† –í—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å (–ø–æ–∫–∞ GPT-4o-mini)", callback_data="neuro")],
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")],
    ])
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–µ–π—Ä–æ–±–æ—Ç ü§ñ\n\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å.\n"
        "–ü—Ä–µ–º–∏—É–º ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –æ—á–µ—Ä–µ–¥–µ–π.\n\n"
        "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=kb,
    )


async def cmd_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
    if not ADMIN_ID or str(update.effective_user.id) != str(ADMIN_ID):
        return

    lines = ["üõ° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
    # —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è/–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å—Ç—å –≤ db.py
    try:
        if get_stats_today:
            s = await get_stats_today()
            lines.append(
                f"üìä –°–µ–≥–æ–¥–Ω—è: –æ–ø–ª–∞—Ç—ã={s.get('payments', 0)}, –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏={s.get('new_users', 0)}"
            )
        if get_totals:
            t = await get_totals()
            lines.append(
                f"üìà –í—Å–µ–≥–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏={t.get('users', 0)}, –ø—Ä–µ–º–∏—É–º={t.get('premium', 0)}, –æ–ø–ª–∞—Ç—ã={t.get('payments', 0)}"
            )
    except Exception as e:
        lines.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    # —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ)
    lines.append(f"WEBHOOK: {(_public_url or '')[:80]}")
    await update.message.reply_text("\n".join(lines))


async def on_buy_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not CRYPTOPAY_KEY:
        await query.message.reply_text(
            "üí≥ –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –î–æ–±–∞–≤—å CRYPTOPAY_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
        )
        return

    payload = str(query.from_user.id)  # –≤–∞–∂–Ω–æ: —ç—Ç–æ –º—ã –∑–∞—Ç–µ–º –ø–æ–ª—É—á–∏–º –≤ –≤–µ–±—Ö—É–∫–µ
    headers = {"Crypto-Pay-API-Token": CRYPTOPAY_KEY}
    data = {
        "asset": "USDT",
        "amount": "3",
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π",
        "payload": payload,
    }
    try:
        r = requests.post(
            "https://pay.crypt.bot/api/createInvoice",
            json=data, headers=headers, timeout=15,
        )
        j = r.json()
        url = j["result"]["pay_url"]
        await query.message.reply_text(f"üí≥ –û–ø–ª–∞—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å—Å—ã–ª–∫–µ:\n{url}")
    except Exception as e:
        await query.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç: {e}")


async def on_neuro_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ GPT-4o-mini. –î—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ üîß")


async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text or ""

    # –ü—Ä–µ–º–∏—É–º ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    if await is_premium(user_id):
        try:
            reply = ask_gpt(text)
            await update.message.reply_text(reply)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        return

    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç (5/–¥–µ–Ω—å)
    if await can_send_message(user_id, limit=5):
        try:
            reply = ask_gpt(text)
            await update.message.reply_text(reply)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
    else:
        await update.message.reply_text(
            "üö´ –°–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –∏–∑ 5 —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            "–ö—É–ø–∏ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è."
        )


# ========================
# HTTP-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (webhooks)
# ========================
@app.post("/tg")
async def telegram_webhook(request: Request):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Telegram webhook.
    """
    global application
    if application is None:
        return {"ok": False, "error": "bot not initialized"}

    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"ok": True}


@app.post("/cryptopay-webhook")
async def cryptopay_webhook(request: Request):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç CryptoBot.
    –õ–æ–≤–∏–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –ø–æ–¥—Ä–æ–±–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º, –≤—ã–¥–∞—ë–º –ø—Ä–µ–º–∏—É–º –∏ –ø–∏—à–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    """
    global application

    raw = await request.body()
    try:
        raw_text = raw.decode("utf-8", "ignore")
    except Exception:
        raw_text = str(raw)
    logger.info("CRYPTO WEBHOOK RAW: %s", raw_text)

    # –†–∞–∑–±–æ—Ä JSON
    try:
        data = await request.json()
    except Exception:
        logger.exception("CRYPTO WEBHOOK: bad json")
        return {"ok": False, "reason": "bad json"}

    # –ò–∑–≤–ª–µ–∫–∞–µ–º invoice/status/payload –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–±—ë—Ä—Ç–æ–∫
    invoice = (
        data.get("invoice")
        or (data.get("payload") or {}).get("invoice")
        or (data.get("update") or {}).get("invoice")
        or {}
    )
    status = (invoice.get("status") or data.get("status") or "").lower().strip()
    payload = (
        invoice.get("payload")
        or (invoice.get("custom_data") or {}).get("payload")
        or (data.get("payload") if isinstance(data.get("payload"), str) else None)
    )
    amount = invoice.get("amount") or invoice.get("paid_amount")
    asset  = invoice.get("asset") or invoice.get("paid_asset") or "USDT"

    if status == "paid" and payload:
        try:
            user_id = int(str(payload).strip())
        except Exception:
            user_id = None

        if user_id:
            try:
                # 1) –ü—Ä–µ–º–∏—É–º –Ω–∞ 30 –¥–Ω–µ–π
                expires_at = (datetime.now() + timedelta(days=30)).isoformat()
                await set_premium(user_id, expires_at)

                # 2) –ó–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –µ—Å—Ç—å)
                try:
                    if record_payment:
                        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º amount –∫ —Å—Ç—Ä–æ–∫–µ/float
                        val = None
                        try:
                            val = float(str(amount)) if amount is not None else None
                        except Exception:
                            pass
                        await record_payment(user_id, val, asset, datetime.utcnow().isoformat())
                except Exception:
                    logger.exception("CRYPTO WEBHOOK: record_payment failed")

                # 3) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                try:
                    await application.bot.send_message(
                        chat_id=user_id,
                        text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.",
                    )
                except Exception:
                    logger.exception("CRYPTO WEBHOOK: can't notify user %s", user_id)

                if ADMIN_ID:
                    try:
                        await application.bot.send_message(
                            chat_id=int(ADMIN_ID),
                            text=f"üí∞ –û–ø–ª–∞—Ç–∞: user={user_id}, amount={amount} {asset}",
                        )
                    except Exception:
                        pass

                logger.info("CRYPTO WEBHOOK: premium set for user %s until %s", user_id, expires_at)
                return {"ok": True}
            except Exception:
                logger.exception("CRYPTO WEBHOOK: set_premium failed")
                return {"ok": False, "reason": "set_premium failed"}

    # –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º –∞–¥–º–∏–Ω–∞
    try:
        if ADMIN_ID:
            await application.bot.send_message(
                chat_id=int(ADMIN_ID),
                text=f"‚ö†Ô∏è Crypto webhook –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\nstatus={status}\npayload={payload}\nraw={raw_text[:1000]}",
            )
    except Exception:
        pass

    logger.warning("CRYPTO WEBHOOK: unhandled payload. status=%s payload=%s data=%s", status, payload, data)
    return {"ok": True, "handled": False}


@app.get("/health")
async def health():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å DeprecationWarning –æ—Ç utcnow()
    return {"status": "ok", "time": datetime.utcnow().isoformat()}


# ========================
# Keep-alive
# ========================
def _keepalive_loop():
    if not _public_url:
        return
    url = f"{_public_url.rstrip('/')}/health"
    session = requests.Session()
    while not _keepalive_stop.wait(540):  # ~9 –º–∏–Ω—É—Ç
        try:
            session.get(url, timeout=8)
            logger.debug("keep-alive ping %s", url)
        except Exception:
            pass


# ========================
# –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª FastAPI
# ========================
def build_application() -> Application:
    app_ = ApplicationBuilder().token(BOT_TOKEN).build()
    app_.add_handler(CommandHandler("start", cmd_start))
    app_.add_handler(CommandHandler("admin", cmd_admin))
    app_.add_handler(CallbackQueryHandler(on_buy_btn, pattern=r"^buy$"))
    app_.add_handler(CallbackQueryHandler(on_neuro_btn, pattern=r"^neuro$"))
    app_.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))
    return app_


@app.on_event("startup")
async def on_startup():
    global application, _public_url

    # 1) DB
    await init_db()

    # 2) Telegram Application
    application = build_application()
    await application.initialize()
    await application.start()

    # 3) Webhook
    _public_url = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("PUBLIC_URL")
    if not _public_url:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω PUBLIC_URL/RENDER_EXTERNAL_URL")

    webhook_url = f"{_public_url.rstrip('/')}/tg"
    await application.bot.set_webhook(webhook_url, drop_pending_updates=True)
    logger.info("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Telegram webhook: %s", webhook_url)

    # 4) Keep-alive
    threading.Thread(target=_keepalive_loop, daemon=True).start()

    logger.info("üöÄ Startup complete. Listening on port %s", PORT)


@app.on_event("shutdown")
async def on_shutdown():
    _keepalive_stop.set()
    try:
        if application is not None:
            await application.stop()
            await application.shutdown()
    finally:
        logger.info("üõë Shutdown complete")


# ========================
# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ/Render
# ========================
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=PORT)

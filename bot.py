import os
import logging
import asyncio
import threading
import time
from datetime import datetime, timedelta

import requests
from dotenv import load_dotenv
from fastapi import FastAPI, Request
import uvicorn

from openai import OpenAI
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, ApplicationBuilder,
    CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters,
)

# =========================
# –ö–æ–Ω—Ñ–∏–≥ –∏ –∫–ª–∏–µ–Ω—Ç—ã
# =========================
load_dotenv()

BOT_TOKEN      = os.getenv("BOT_TOKEN", "")
OPENAI_KEY     = os.getenv("OPENAI_KEY", "")
DEEPSEEK_KEY   = os.getenv("DEEPSEEK_KEY", "")
CRYPTOPAY_KEY  = os.getenv("CRYPTOPAY_KEY", "")
REPLICATE_KEY  = os.getenv("REPLICATE_KEY", "")
ADMIN_ID       = int(os.getenv("ADMIN_ID", "0"))
PORT           = int(os.getenv("PORT", "10000"))

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –ø—É—Å—Ç")
if not OPENAI_KEY:
    raise RuntimeError("OPENAI_KEY –ø—É—Å—Ç")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s"
)
logger = logging.getLogger("neurobot")

# –ú–æ–¥–µ–ª–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ ‚Äî –¥–ª—è –¥–≤–∏–∂–∫–∞)
MODEL_OPENAI   = "OpenAI ¬∑ GPT-4o-mini"
MODEL_DEEPSEEK = "DeepSeek ¬∑ Chat"
DEFAULT_MODEL  = MODEL_OPENAI

# –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
_user_model_visual: dict[int, str] = {}  # ¬´–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏¬ª –∫–æ—Ç–æ—Ä–æ–µ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
_user_model: dict[int, str] = {}         # —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π backend (OpenAI/DeepSeek)
_awaiting_img_prompt: dict[int, bool] = {}

# –†–ï–ñ–ò–ú–´ (—è—Ä–ª—ã–∫–∏): —Ä–µ–∞–ª—å–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É
TASK_MODES = {
    "default": {
        "label": "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
        "system": (
            "You are a helpful, concise assistant. Prefer clear steps and short answers unless "
            "the user asks for depth."
        ),
    },
    "coding": {
        "label": "–ö–æ–¥–∏–Ω–≥",
        "system": (
            "You are a senior software engineer. Provide runnable code with comments, point out pitfalls, "
            "and show minimal examples. Prefer Python/JS unless the user specifies otherwise."
        ),
    },
    "seo": {
        "label": "SEO",
        "system": (
            "You are an SEO strategist. Produce keyword-rich but natural copy, suggest title/H1/meta, "
            "and include semantic clusters and internal linking ideas when useful."
        ),
    },
    "translate": {
        "label": "–ü–µ—Ä–µ–≤–æ–¥",
        "system": (
            "You are a professional translator (RU‚ÜîEN). Preserve meaning, tone, and idioms. "
            "If the source is ambiguous, offer the two best variants."
        ),
    },
    "summarize": {
        "label": "–†–µ–∑—é–º–µ",
        "system": (
            "You are a world-class summarizer. Output structured bullet points, key facts, and action items. "
            "Keep it brief unless asked to expand."
        ),
    },
    "creative": {
        "label": "–ö—Ä–µ–∞—Ç–∏–≤",
        "system": (
            "You are a creative copywriter. Offer punchy hooks, strong voice, and multiple variants when helpful. "
            "Avoid clich√©s."
        ),
    },
}
_user_task_mode: dict[int, str] = {}  # —Ö—Ä–∞–Ω–∏—Ç –∫–ª—é—á —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# OpenAI –∫–ª–∏–µ–Ω—Ç
oai = OpenAI(api_key=OPENAI_KEY)

# =========================
# DB helpers
# =========================
from db import (  # noqa
    init_db, add_user, is_premium, can_send_message, set_premium,
    get_usage_today, get_free_credits, consume_free_credit, add_free_credits,
    set_referrer_if_empty, count_paid_users_today, count_paid_users_total,
    get_premium_expires, list_expired_unnotified, mark_expired_notified
)

# =========================
# FastAPI & PTB
# =========================
app = FastAPI(title="NeuroBot API")
application: Application | None = None
_public_url: str | None = None
_keepalive_stop = threading.Event()

REF_BONUS   = 25
DAILY_LIMIT = 5

# ---------- LLM ----------
def _compose_prompt(user_id: int, user_text: str) -> list[dict]:
    """–°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
    mode_key = _user_task_mode.get(user_id, "default")
    sys_text = TASK_MODES.get(mode_key, TASK_MODES["default"])["system"]
    return [
        {"role": "system", "content": sys_text},
        {"role": "user", "content": user_text},
    ]

def _ask_openai(user_id: int, prompt: str) -> str:
    msgs = _compose_prompt(user_id, prompt)
    r = oai.chat.completions.create(
        model="gpt-4o-mini",
        messages=msgs,
        temperature=0.7,
    )
    return r.choices[0].message.content

def _ask_deepseek(user_id: int, prompt: str) -> str:
    if not DEEPSEEK_KEY:
        return "DeepSeek –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ –∑–∞–¥–∞–Ω DEEPSEEK_KEY."
    try:
        import httpx
        url = "https://api.deepseek.com/chat/completions"
        headers = {"Authorization": f"Bearer {DEEPSEEK_KEY}", "Content-Type": "application/json"}
        payload = {
            "model": "deepseek-chat",
            "messages": _compose_prompt(user_id, prompt),
            "temperature": 0.7,
        }
        with httpx.Client(timeout=30) as s:
            resp = s.post(url, headers=headers, json=payload)
            if resp.status_code != 200:
                try:
                    err = resp.json()
                    msg = err.get("error", {}).get("message") or err.get("message") or str(err)
                except Exception:
                    msg = resp.text[:400]
                return f"DeepSeek API error {resp.status_code}: {msg}"
            data = resp.json()
        choice = (data or {}).get("choices", [{}])[0]
        msg = (choice or {}).get("message", {})
        text = msg.get("content") or (choice or {}).get("text") or ""
        return text or "DeepSeek –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ DeepSeek: {e!s}"

def ask_llm(user_id: int, prompt: str) -> str:
    real = _user_model.get(user_id, DEFAULT_MODEL)
    if real == MODEL_DEEPSEEK:
        return _ask_deepseek(user_id, prompt)
    return _ask_openai(user_id, prompt)


# ---------- Images (Replicate: Flux-1 Schnell) ----------
def _replicate_generate_sync(prompt: str, width: int = 1024, height: int = 1024) -> list[str]:
    """
    –ë–ª–æ–∫–∏—Ä—É—é—â–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Replicate. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL –≥–æ—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """
    if not REPLICATE_KEY:
        raise RuntimeError("REPLICATE_KEY –ø—É—Å—Ç ‚Äî –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–ª—é—á Replicate –≤ .env")

    model = "black-forest-labs/flux-schnell"
    headers = {
        "Authorization": f"Token {REPLICATE_KEY}",
        "Content-Type": "application/json"
    }

    create_payload = {
        "input": {
            "prompt": prompt,
            "width": width,
            "height": height,
            "num_outputs": 1,
            "go_fast": True
        }
    }

    create = requests.post(
        f"https://api.replicate.com/v1/models/{model}/predictions",
        json=create_payload,
        headers=headers,
        timeout=30
    )
    create.raise_for_status()
    prediction = create.json()
    pred_id = prediction.get("id")
    if not pred_id:
        raise RuntimeError(f"Replicate: –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ id –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {prediction}")

    status = prediction.get("status")
    get_url = f"https://api.replicate.com/v1/predictions/{pred_id}"

    for _ in range(60):
        if status in ("succeeded", "failed", "canceled"):
            break
        poll = requests.get(get_url, headers=headers, timeout=15)
        poll.raise_for_status()
        prediction = poll.json()
        status = prediction.get("status")
        if status == "succeeded":
            break
        time.sleep(1)

    if status != "succeeded":
        err = prediction.get("error") or status
        raise RuntimeError(f"Replicate: –∑–∞–¥–∞—á–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {err}")

    output = prediction.get("output") or []
    if isinstance(output, str):
        output = [output]
    return output


async def generate_image_and_send(user_id: int, chat_id: int, prompt: str, bot) -> None:
    try:
        urls = await asyncio.to_thread(_replicate_generate_sync, prompt)
        if not urls:
            await bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return
        await bot.send_photo(chat_id=chat_id, photo=urls[0], caption="–ì–æ—Ç–æ–≤–æ ‚úÖ")
    except Exception as e:
        await bot.send_message(chat_id=chat_id, text=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
# ---------- UI ----------
def main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üß† –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="models")],
        [InlineKeyboardButton("üéõ –†–µ–∂–∏–º—ã", callback_data="modes")],
        [InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="img")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="ref")],
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")],
    ])

# ===== –ú–µ–Ω—é –º–æ–¥–µ–ª–µ–π =====
def _models_menu_text(mode: str = "short") -> str:
    if mode == "short":
        return (
            "<b>–ö—Ä–∞—Ç–∫–æ –æ –º–æ–¥–µ–ª—è—Ö</b>\n"
            "‚Ä¢ <b>GPT-5</b> ‚Äî —Ñ–ª–∞–≥–º–∞–Ω –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á, –∫–æ–¥–∏–Ω–≥–∞ –∏ –¥–ª–∏–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤.\n"
            "‚Ä¢ <b>Claude 4.5 Sonnet</b> ‚Äî —Å–∏–ª—ë–Ω –≤ –∞–Ω–∞–ª–∏–∑–µ, —Å—Ç–∏–ª–µ –∏ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö.\n"
            "‚Ä¢ <b>Gemini 2.5 Pro</b> ‚Äî —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞, –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å.\n"
            "‚Ä¢ <b>OpenAI o3</b> ‚Äî –ª–æ–≥–∏–∫–∞ –∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è, –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Ç–æ–Ω.\n"
            "‚Ä¢ <b>DeepSeek V3.2</b> ‚Äî –±—ã—Å—Ç—Ä—ã–µ –∏ —ç–∫–æ–Ω–æ–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –æ—Ç–ª–∏—á–Ω–æ –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–∫–∏.\n"
            "‚Ä¢ <b>OpenAI o4-mini</b> ‚Äî –±—ã—Å—Ç—Ä—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ.\n"
            "‚Ä¢ <b>GPT-5 mini</b> ‚Äî –ª—ë–≥–∫–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –∏ –±—ã—Å—Ç—Ä—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π.\n"
            "‚Ä¢ <b>GPT-4o search</b> ‚Äî –º–æ–¥–µ–ª—å —Å —É–ø–æ—Ä–æ–º –Ω–∞ –ø–æ–∏—Å–∫/–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤.\n"
            "‚Ä¢ <b>GPT-4o mini</b> ‚Äî —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á.\n"
            "‚Ä¢ <b>Claude 3.5 Haiku</b> ‚Äî –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö.\n"
            "‚Ä¢ <b>Gemini 2.5 Flash</b> ‚Äî –±—ã—Å—Ç—Ä—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏, —Ä–µ–∑—é–º–µ, —Å–ø–∏—Å–∫–∏.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã:"
        )
    else:
        return (
            "<b>–ü–æ–¥—Ä–æ–±–Ω–æ –æ –º–æ–¥–µ–ª—è—Ö</b>\n"
            "<b>GPT-5</b> ‚Äî —Ç–æ–ø –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∫–æ–¥–∞, —Å–ª–æ–∂–Ω—ã–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º –∏ –¥–ª–∏–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –∞—É–¥–∏—Ç–æ–≤, —Å–ª–æ–∂–Ω—ã—Ö SQL –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π.\n\n"
            "<b>Claude 4.5 Sonnet</b> ‚Äî —Å–∏–ª—ë–Ω –≤ —è–∑—ã–∫–µ –∏ —Å—Ç–∏–ª–µ: —ç—Å—Å–µ, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ/–¥–µ–ª–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã, –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. –•–æ—Ä–æ—à –Ω–∞ –æ–≥—Ä–æ–º–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.\n\n"
            "<b>Gemini 2.5 Pro</b> ‚Äî —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω: –∞–Ω–∞–ª–∏–∑, –∏–¥–µ–∏, –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –±—ã—Å—Ç—Ä—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.\n\n"
            "<b>OpenAI o3</b> ‚Äî —Ñ–æ–∫—É—Å –Ω–∞ –ª–æ–≥–∏–∫–µ/Chain-of-Thought: –ø–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ç–æ–Ω–∫–∞—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑.\n\n"
            "<b>DeepSeek V3.2</b> ‚Äî –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π: –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Ä–µ–∑—é–º–µ, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∏.\n\n"
            "<b>OpenAI o4-mini</b> ‚Äî –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: —á–µ—Ä–Ω–æ–≤—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏, user stories, –Ω–∞–±—Ä–æ—Å–∫–∏ –∫–æ–¥–∞.\n\n"
            "<b>GPT-5 mini</b> ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏: –∏–¥–µ–∏, —Å–ø–∏—Å–∫–∏, –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏, –±—ã—Å—Ç—Ä—ã–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏.\n\n"
            "<b>GPT-4o search</b> ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ: –Ω–∞–±–æ—Ä —Ñ–∞–∫—Ç–æ–≤, —Ü–∏—Ç–∞—Ç—ã, –æ–±–∑–æ—Ä–Ω—ã–µ —Å–ø—Ä–∞–≤–∫–∏.\n\n"
            "<b>GPT-4o mini</b> ‚Äî —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á/–ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏ –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–≤–µ—Ç–æ–≤.\n\n"
            "<b>Claude 3.5 Haiku</b> ‚Äî –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞, –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–º—ã—Å–ª–∞.\n\n"
            "<b>Gemini 2.5 Flash</b> ‚Äî —Ä–µ–∑—é–º–µ —Å—Ç—Ä–∞–Ω–∏—Ü, TODO-—Å–ø–∏—Å–∫–∏, –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–∏—Å—å–º–∞, –±—ã—Å—Ç—Ä—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:"
        )

def models_keyboard_visual() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üî∏ –ö—Ä–∞—Ç–∫–æ",  callback_data="mvis:short"),
         InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ", callback_data="mvis:full")],
        [InlineKeyboardButton("Claude 3.5 Haiku", callback_data="mvis:sel:Claude 3.5 Haiku"),
         InlineKeyboardButton("‚úÖ GPT-5",         callback_data="mvis:sel:GPT-5")],
        [InlineKeyboardButton("Claude 4.5 Sonnet", callback_data="mvis:sel:Claude 4.5 Sonnet"),
         InlineKeyboardButton("Gemini 2.5 Pro",    callback_data="mvis:sel:Gemini 2.5 Pro")],
        [InlineKeyboardButton("OpenAI o3",         callback_data="mvis:sel:OpenAI o3"),
         InlineKeyboardButton("DeepSeek V3.2",     callback_data="mvis:sel:DeepSeek V3.2")],
        [InlineKeyboardButton("OpenAI o4-mini",    callback_data="mvis:sel:OpenAI o4-mini"),
         InlineKeyboardButton("GPT-5 mini",        callback_data="mvis:sel:GPT-5 mini")],
        [InlineKeyboardButton("GPT-4o search üîé",  callback_data="mvis:sel:GPT-4o search"),
         InlineKeyboardButton("GPT-4o mini",       callback_data="mvis:sel:GPT-4o mini")],
        [InlineKeyboardButton("Gemini 2.5 Flash",  callback_data="mvis:sel:Gemini 2.5 Flash")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",          callback_data="home")],
    ])

# ===== –ú–µ–Ω—é —Ä–µ–∂–∏–º–æ–≤ (—è—Ä–ª—ã–∫–∏) =====
def modes_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç", callback_data="mode:default"),
         InlineKeyboardButton("–ö–æ–¥–∏–Ω–≥",   callback_data="mode:coding")],
        [InlineKeyboardButton("SEO",      callback_data="mode:seo"),
         InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥",  callback_data="mode:translate")],
        [InlineKeyboardButton("–†–µ–∑—é–º–µ",   callback_data="mode:summarize"),
         InlineKeyboardButton("–ö—Ä–µ–∞—Ç–∏–≤",  callback_data="mode:creative")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")],
    ])

def current_mode_label(user_id: int) -> str:
    key = _user_task_mode.get(user_id, "default")
    return TASK_MODES.get(key, TASK_MODES["default"])["label"]
# =========================
# –ö–Ω–æ–ø–∫–∞/–∫–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
# =========================
async def on_img_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass

    user_id = q.from_user.id
    if not await is_premium(user_id):
        await q.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω–æ –≤ –ü—Ä–µ–º–∏—É–º.\n\n"
            "–ü—Ä–µ–º–∏—É–º –¥–∞—ë—Ç:\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º\n"
            "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, —Å—Ç–æ–∏–º–æ—Å—Ç—å $3 –Ω–∞ 30 –¥–Ω–µ–π.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")]]
            )
        )
        return

    _awaiting_img_prompt[user_id] = True
    await q.message.reply_text("–û–ø–∏—à–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–µ–∫—Å—Ç–æ–º (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

async def cmd_img(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await is_premium(user_id):
        await update.message.reply_text(
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ü—Ä–µ–º–∏—É–º ($3/30 –¥–Ω–µ–π).",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")]]
            )
        )
        return
    _awaiting_img_prompt[user_id] = True
    await update.message.reply_text(
        "–û–ø–∏—à–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–µ–∫—Å—Ç–æ–º. –ü—Ä–∏–º–µ—Ä: ¬´—Å–∏–Ω–∏–π –Ω–µ–æ–Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥, –¥–æ–∂–¥—å, —Å—Ç–∏–ª—å –∫–∏–±–µ—Ä–ø–∞–Ω–∫¬ª."
    )
# =========================
# /start + —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞
# =========================
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await add_user(user.id)

    # deep-link –ø–∞—Ä–∞–º–µ—Ç—Ä: /start ref_<tg_id>
    ref_id = None
    if context.args:
        arg = context.args[0]
        if arg.startswith("ref_"):
            try:
                ref_id = int(arg.split("ref_", 1)[1])
            except Exception:
                ref_id = None

    if ref_id and ref_id != user.id:
        try:
            first_bind = await set_referrer_if_empty(user.id, ref_id)
            if first_bind:
                await add_free_credits(ref_id, REF_BONUS)
                try:
                    await application.bot.send_message(
                        chat_id=ref_id,
                        text=f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n+{REF_BONUS} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫!"
                    )
                except Exception:
                    pass
        except Exception as e:
            logger.warning("ref attach failed: %s", e)

    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–µ–π—Ä–æ–±–æ—Ç ü§ñ\n\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {DAILY_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å (+ —Ä–µ—Ñ. –±–æ–Ω—É—Å—ã).\n"
        "–ü—Ä–µ–º–∏—É–º ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –æ—á–µ—Ä–µ–¥–µ–π.\n\n"
        "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    if update.message:
        await update.message.reply_text(text, reply_markup=main_keyboard())
    else:
        await context.bot.send_message(chat_id=user.id, text=text, reply_markup=main_keyboard())

# =========================
# –ü—Ä–æ—Ñ–∏–ª—å
# =========================
async def _render_profile_html(user_id: int) -> str:
    prem = await is_premium(user_id)
    used_today = await get_usage_today(user_id)
    bonus = await get_free_credits(user_id)

    me = await application.bot.get_me()
    deep_link = f"https://t.me/{me.username}?start=ref_{user_id}"
    visual = _user_model_visual.get(user_id, "GPT-4o mini")
    mode_lbl = current_mode_label(user_id)

    if prem:
        left_text = "‚àû (–ü—Ä–µ–º–∏—É–º)"
        status = "–ü—Ä–µ–º–∏—É–º"
        # –ü–æ–∫–∞–∂–µ–º –¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –∏ —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å
        exp_iso = await get_premium_expires(user_id)
        extra = ""
        if exp_iso:
            try:
                exp_dt = datetime.fromisoformat(exp_iso)
            except Exception:
                exp_dt = None
            if exp_dt:
                now_dt = datetime.utcnow()
                if exp_dt.tzinfo:  # –µ—Å–ª–∏ –≤ expires_at –µ—Å—Ç—å tz
                    now_dt = datetime.now(exp_dt.tzinfo)
                remaining = exp_dt - now_dt
                days_left = max(0, remaining.days + (1 if remaining.seconds > 0 else 0))
                extra = f"\n–ü—Ä–µ–º–∏—É–º –¥–æ: <b>{exp_dt.strftime('%d.%m.%Y %H:%M')}</b> (–æ—Å—Ç–∞–ª–æ—Å—å ~<b>{days_left}</b> –¥–Ω.)"
        status += extra
    else:
        left_day = max(0, DAILY_LIMIT - used_today)
        total_left = left_day + bonus
        left_text = f"{total_left} (–¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç {left_day}, –±–æ–Ω—É—Å–æ–≤ {bonus})"
        status = "–û–±—ã—á–Ω—ã–π"

    return (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"ID: <code>{user_id}</code>\n"
        f"–°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞—è–≤–æ–∫: <b>{left_text}</b>\n"
        f"–ú–æ–¥–µ–ª—å: <b>{visual}</b>\n"
        f"–†–µ–∂–∏–º: <b>{mode_lbl}</b>\n\n"
        f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n{deep_link}\n\n"
        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ: +{REF_BONUS} –∑–∞—è–≤–æ–∫."
    )

async def cmd_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    txt = await _render_profile_html(user_id)
    await update.message.reply_text(txt, parse_mode="HTML", reply_markup=main_keyboard())

async def on_profile_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass
    txt = await _render_profile_html(q.from_user.id)
    try:
        await q.message.edit_text(txt, parse_mode="HTML", reply_markup=main_keyboard())
    except Exception:
        await q.message.reply_text(txt, parse_mode="HTML", reply_markup=main_keyboard())

# =========================
# –†–µ—Ñ–µ—Ä–∞–ª–∫–∞
# =========================
async def _render_referral_html(user_id: int) -> str:
    me = await application.bot.get_me()
    deep_link = f"https://t.me/{me.username}?start=ref_{user_id}"
    return (
        "üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ <b>+{REF_BONUS}</b> –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{deep_link}\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "‚Ä¢ –ß–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∏–º–∞–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∂–º—ë—Ç /start\n"
        f"‚Ä¢ –í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è <b>+{REF_BONUS}</b> –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ –ë–æ–Ω—É—Å—ã —Å—É–º–º–∏—Ä—É—é—Ç—Å—è –∏ —Ä–∞—Å—Ö–æ–¥—É—é—Ç—Å—è –ø–æ—Å–ª–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞\n"
    )

async def cmd_ref(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    txt = await _render_referral_html(user_id)
    await update.message.reply_text(txt, parse_mode="HTML", reply_markup=main_keyboard())

async def on_ref_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass
    txt = await _render_referral_html(q.from_user.id)
    try:
        await q.message.edit_text(txt, parse_mode="HTML", reply_markup=main_keyboard())
    except Exception:
        await q.message.reply_text(txt, parse_mode="HTML", reply_markup=main_keyboard())

# =========================
# –í–∏–∑—É–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
# =========================
async def on_models_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass
    text = _models_menu_text("short")
    try:
        await q.message.edit_text(text, parse_mode="HTML", reply_markup=models_keyboard_visual())
    except Exception:
        await q.message.reply_text(text, parse_mode="HTML", reply_markup=models_keyboard_visual())

async def on_models_view_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass
    mode = "short" if q.data == "mvis:short" else "full"
    text = _models_menu_text(mode)
    try:
        await q.message.edit_text(text, parse_mode="HTML", reply_markup=models_keyboard_visual())
    except Exception:
        await q.message.reply_text(text, parse_mode="HTML", reply_markup=models_keyboard_visual())

async def on_model_visual_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass
    label = (q.data or "").split("mvis:sel:", 1)[-1].strip() or "GPT-4o mini"

    _user_model_visual[q.from_user.id] = label
    # –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –≤—Å—ë, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç DeepSeek ‚Äî –Ω–∞ DeepSeek, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî OpenAI
    if "DeepSeek" in label:
        _user_model[q.from_user.id] = MODEL_DEEPSEEK
    else:
        _user_model[q.from_user.id] = MODEL_OPENAI

    msg = f"‚úÖ –ú–æ–¥–µ–ª—å ¬´{label}¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n–ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    try:
        await q.message.edit_text(msg, reply_markup=main_keyboard())
    except Exception:
        await q.message.reply_text(msg, reply_markup=main_keyboard())

# =========================
# –†–µ–∂–∏–º—ã (—è—Ä–ª—ã–∫–∏)
# =========================
async def on_modes_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass
    txt = (
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞:\n"
        "‚Ä¢ <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç</b> ‚Äî –æ–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
        "‚Ä¢ <b>–ö–æ–¥–∏–Ω–≥</b> ‚Äî –±–æ–ª—å—à–µ –∫–æ–¥–∞ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤\n"
        "‚Ä¢ <b>SEO</b> ‚Äî —Ç–µ–∫—Å—Ç—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è SEO\n"
        "‚Ä¢ <b>–ü–µ—Ä–µ–≤–æ–¥</b> ‚Äî RU‚ÜîEN, –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Å—Ç–∏–ª—å\n"
        "‚Ä¢ <b>–†–µ–∑—é–º–µ</b> ‚Äî –∫—Ä–∞—Ç–∫–∏–µ –≤—ã–∂–∏–º–∫–∏\n"
        "‚Ä¢ <b>–ö—Ä–µ–∞—Ç–∏–≤</b> ‚Äî –∏–¥–µ–∏, –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Å–ª–æ–≥–∞–Ω—ã"
    )
    try:
        await q.message.edit_text(txt, parse_mode="HTML", reply_markup=modes_keyboard())
    except Exception:
        await q.message.reply_text(txt, parse_mode="HTML", reply_markup=modes_keyboard())

async def on_mode_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass
    key = (q.data or "").split("mode:", 1)[-1]
    if key not in TASK_MODES:
        key = "default"
    _user_task_mode[q.from_user.id] = key
    lbl = TASK_MODES[key]["label"]
    try:
        await q.message.edit_text(f"‚úÖ –†–µ–∂–∏–º ¬´{lbl}¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ì–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å!", reply_markup=main_keyboard())
    except Exception:
        await q.message.reply_text(f"‚úÖ –†–µ–∂–∏–º ¬´{lbl}¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ì–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å!", reply_markup=main_keyboard())

# =========================
# –û–ø–ª–∞—Ç–∞ (CryptoPay)
# =========================
async def on_buy_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        await q.answer()
    except Exception:
        pass

    if not CRYPTOPAY_KEY:
        await q.message.reply_text("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (–Ω–µ—Ç CRYPTOPAY_KEY).")
        return

    payload = str(q.from_user.id)
    headers = {"Crypto-Pay-API-Token": CRYPTOPAY_KEY}
    data = {
        "asset": "USDT",
        "amount": "3",
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π",
        "payload": payload,
    }
    r = requests.post("https://pay.crypt.bot/api/createInvoice", json=data, headers=headers, timeout=15)
    j = r.json()
    url = j["result"]["pay_url"]

    text = (
        "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π: $3\n\n"
        "<b>–ü—Ä–µ–º–∏—É–º –¥–∞—ë—Ç</b>:\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –æ—á–µ—Ä–µ–¥–µ–π)\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ <b>–≤—Å–µ–º</b> –º–æ–¥–µ–ª—è–º\n"
        "‚Ä¢ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b> (Replicate ¬∑ Flux-1 Schnell)\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É\n\n"
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:\n{url}"
    )
    await q.message.reply_text(text, parse_mode="HTML")

# =========================
# –ö–æ–º–∞–Ω–¥—ã /buy /models /mode /help
# =========================
async def cmd_buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /buy ‚Äî —Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞, —á—Ç–æ –∏ –ø–æ –∫–Ω–æ–ø–∫–µ."""
    if not CRYPTOPAY_KEY:
        await update.message.reply_text("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (–Ω–µ—Ç CRYPTOPAY_KEY).")
        return

    payload = str(update.effective_user.id)
    headers = {"Crypto-Pay-API-Token": CRYPTOPAY_KEY}
    data = {
        "asset": "USDT",
        "amount": "3",
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π",
        "payload": payload,
    }
    r = requests.post("https://pay.crypt.bot/api/createInvoice", json=data, headers=headers, timeout=15)
    j = r.json()
    url = j["result"]["pay_url"]

    text = (
        "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π: $3\n\n"
        "<b>–ü—Ä–µ–º–∏—É–º –¥–∞—ë—Ç</b>:\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –æ—á–µ—Ä–µ–¥–µ–π)\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ <b>–≤—Å–µ–º</b> –º–æ–¥–µ–ª—è–º\n"
        "‚Ä¢ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É\n\n"
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:\n{url}"
    )
    await update.message.reply_text(text, parse_mode="HTML")

async def cmd_models(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /models ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏."""
    text = _models_menu_text("short")
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=models_keyboard_visual())

async def cmd_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /mode ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–∂–∏–º–æ–≤."""
    txt = (
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞:\n"
        "‚Ä¢ <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç</b> ‚Äî –æ–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
        "‚Ä¢ <b>–ö–æ–¥–∏–Ω–≥</b> ‚Äî –±–æ–ª—å—à–µ –∫–æ–¥–∞ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤\n"
        "‚Ä¢ <b>SEO</b> ‚Äî —Ç–µ–∫—Å—Ç—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è SEO\n"
        "‚Ä¢ <b>–ü–µ—Ä–µ–≤–æ–¥</b> ‚Äî RU‚ÜîEN, –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Å—Ç–∏–ª—å\n"
        "‚Ä¢ <b>–†–µ–∑—é–º–µ</b> ‚Äî –∫—Ä–∞—Ç–∫–∏–µ –≤—ã–∂–∏–º–∫–∏\n"
        "‚Ä¢ <b>–ö—Ä–µ–∞—Ç–∏–≤</b> ‚Äî –∏–¥–µ–∏, –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Å–ª–æ–≥–∞–Ω—ã"
    )
    await update.message.reply_text(txt, parse_mode="HTML", reply_markup=modes_keyboard())

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏."""
    txt = (
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>\n\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –æ—Ç–≤–µ—á—É.\n"
        "‚Ä¢ –ù—É–∂–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞? –ö–æ–º–∞–Ω–¥–∞ /img.\n"
        "‚Ä¢ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ ‚Äî /models.\n"
        "‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º ‚Äî /mode.\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ ‚Äî /profile, /ref.\n"
        "‚Ä¢ –ü—Ä–µ–º–∏—É–º ($3/30 –¥–Ω–µ–π) ‚Äî /buy.\n\n"
        "–ö–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚Äî –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø:"
    )
    await update.message.reply_text(txt, parse_mode="HTML", reply_markup=main_keyboard())
# =========================
# –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# =========================
async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text or ""

    # –ï—Å–ª–∏ –∂–¥—ë–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º
    if _awaiting_img_prompt.get(user_id):
        _awaiting_img_prompt[user_id] = False
        if not await is_premium(user_id):
            await update.message.reply_text(
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")]])
            )
            return
        await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚Ä¶")
        await generate_image_and_send(user_id, update.effective_chat.id, text, context.bot)
        return

    if await is_premium(user_id):
        reply = ask_llm(user_id, text)
        await update.message.reply_text(reply)
        return

    if await can_send_message(user_id, limit=DAILY_LIMIT):
        reply = ask_llm(user_id, text)
        await update.message.reply_text(reply)
        return

    if await consume_free_credit(user_id):
        reply = ask_llm(user_id, text)
        await update.message.reply_text(reply)
        return

    await update.message.reply_text(
        "üö´ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω.\n"
        f"‚Äî –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {DAILY_LIMIT}/–¥–µ–Ω—å\n"
        f"‚Äî –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã: –ø–æ–ª—É—á–∏—Ç–µ +{REF_BONUS} –∑–∞—è–≤–æ–∫ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ!\n\n"
        "–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ¬´üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞."
    )

# =========================
# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
# =========================
async def cmd_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    paid_today = await count_paid_users_today()
    paid_total = await count_paid_users_total()
    await update.message.reply_text(
        "üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        f"–ü–æ–∫—É–ø–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {paid_today}\n"
        f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º–æ–≤: {paid_total}\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add_premium <user_id> <days>\n"
        "/remove_premium <user_id>\n"
        "/broadcast <text>"
    )

async def cmd_add_premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if len(context.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add_premium <user_id> <days>")
        return
    try:
        uid = int(context.args[0])
        days = int(context.args[1])
        expires_at = (datetime.now() + timedelta(days=days)).isoformat()
        await set_premium(uid, expires_at)
        await update.message.reply_text(f"‚úÖ –ü—Ä–µ–º–∏—É–º –≤—ã–¥–∞–Ω {uid} –Ω–∞ {days} –¥–Ω.")
        try:
            await application.bot.send_message(uid, f"üéâ –í–∞–º –≤—ã–¥–∞–ª–∏ –ø—Ä–µ–º–∏—É–º –Ω–∞ {days} –¥–Ω–µ–π!")
        except Exception:
            pass
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def cmd_remove_premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    try:
        if not context.args:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /remove_p—Ä–µ–º–∏um <user_id>")
            return
        uid = int(context.args[0])
        await set_premium(uid, (datetime.now() - timedelta(days=1)).isoformat())
        await update.message.reply_text(f"‚ùé –ü—Ä–µ–º–∏—É–º —Å–Ω—è—Ç —É {uid}.")
        try:
            await application.bot.send_message(uid, "‚ö†Ô∏è –í–∞—à –ø—Ä–µ–º–∏—É–º –±—ã–ª –æ—Ç–∫–ª—é—á—ë–Ω.")
        except Exception:
            pass
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def cmd_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /broadcast <text>")
        return
    text = " ".join(context.args)
    await update.message.reply_text(f"–û–∫, –æ—Ç–ø—Ä–∞–≤–ª—é: {text}\n(—Ä–µ–∞–ª—å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –≤ db.py)")

# =========================
# Webhooks
# =========================
@app.post("/tg")
async def telegram_webhook(request: Request):
    global application
    if application is None:
        return {"ok": False, "error": "bot not initialized"}
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"ok": True}

@app.post("/cryptopay-webhook")
async def cryptopay_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ Crypto Pay (update_type=invoice_paid)."""
    global application
    try:
        data = await request.json()
    except Exception:
        return {"ok": False, "error": "bad json"}

    try:
        logger.info("CryptoPay webhook: %s", data)
    except Exception:
        pass

    user_id = None
    paid = False

    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    update_type = data.get("update_type")
    inv_new = data.get("payload") or {}
    if update_type == "invoice_paid" and isinstance(inv_new, dict):
        raw_uid = inv_new.get("payload")
        status_new = inv_new.get("status")
        if raw_uid is not None and (status_new is None or status_new == "paid"):
            try:
                user_id = int(str(raw_uid))
                paid = True
            except Exception:
                user_id = None

    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    if not paid:
        invoice = data.get("invoice") or {}
        status = invoice.get("status")
        raw_uid = invoice.get("payload")
        if status == "paid" and raw_uid is not None:
            try:
                user_id = int(str(raw_uid))
                paid = True
            except Exception:
                user_id = None

    if paid and user_id:
        expires_dt = datetime.now() + timedelta(days=30)
        await set_premium(user_id, expires_dt.isoformat())
        try:
            text = (
                "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞</b>!\n"
                f"–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ <b>{expires_dt.strftime('%d.%m.%Y')}</b>.\n\n"
                "–ß—Ç–æ –¥–∞–ª—å—à–µ?\n"
                "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ —Ä–µ—Ñ. —Å—Å—ã–ª–∫—É\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º\n"
                "‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üôÇ"
            )
            await application.bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode="HTML",
                reply_markup=main_keyboard()
            )
        except Exception:
            try:
                await application.bot.send_message(
                    chat_id=user_id,
                    text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π."
                )
            except Exception:
                pass

    return {"ok": True}

@app.get("/health")
async def health():
    return {"status": "ok", "time": datetime.utcnow().isoformat()}

# =========================
# Keep-alive (40s) + –∞–≤—Ç–æ-–ø–æ—á–∏–Ω–∫–∞ –≤–µ–±—Ö—É–∫–∞
# =========================
def _keepalive_loop():
    if not _public_url:
        return
    url = f"{_public_url.rstrip('/')}/health"
    session = requests.Session()
    while not _keepalive_stop.wait(40):
        try:
            session.get(url, timeout=8)
        except Exception:
            pass

async def _webhook_guard_loop():
    """–†–∞–∑ –≤ 10 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º webhook –∏ —á–∏–Ω–∏–º, –µ—Å–ª–∏ –æ–Ω —Å–ª–µ—Ç–µ–ª."""
    await asyncio.sleep(8)
    while True:
        try:
            bot = application.bot
            _ = await bot.get_me()
            info = await bot.get_webhook_info()
            needed = f"{_public_url.rstrip('/')}/tg"
            if info.url != needed:
                try:
                    await bot.set_webhook(needed, max_connections=40, drop_pending_updates=False)
                    logger.info("üîß Webhook –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", needed)
                except Exception as e:
                    logger.warning("Webhook repair failed: %s", e)
        except Exception as e:
            logger.warning("webhook guard error: %s", e)
        await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç

async def _premium_expiry_notifier_loop():
    """–†–∞–∑ –≤ 15 –º–∏–Ω—É—Ç –∏—â–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –ø—Ä–µ–º–∏—É–º—ã –∏ —à–ª—ë–º 1 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    await asyncio.sleep(10)
    while True:
        try:
            now_iso = datetime.utcnow().isoformat()
            user_ids = await list_expired_unnotified(now_iso)
            for uid in user_ids:
                # –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                try:
                    await application.bot.send_message(
                        chat_id=uid,
                        text=(
                            "‚õîÔ∏è –í–∞—à –ø—Ä–µ–º–∏—É–º –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.\n\n"
                            "–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç, –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º "
                            "–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
                        ),
                        reply_markup=InlineKeyboardMarkup(
                            [[InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")]]
                        )
                    )
                except Exception:
                    pass
                # –ø–æ–º–µ—Ç–∏—Ç—å, —á—Ç–æ —É–≤–µ–¥–æ–º–∏–ª–∏
                try:
                    await mark_expired_notified(uid, now_iso)
                except Exception:
                    pass
        except Exception as e:
            logger.warning("premium notifier error: %s", e)
        await asyncio.sleep(900)  # 15 –º–∏–Ω—É—Ç

# =========================
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π error-handler PTB (—á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª –Ω–∞ 400)
# =========================
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.warning("PTB error: %s", getattr(context, "error", None))

# =========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# =========================
def build_application() -> Application:
    app_ = ApplicationBuilder().token(BOT_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app_.add_handler(CommandHandler("start",   cmd_start))
    app_.add_handler(CommandHandler("profile", cmd_profile))
    app_.add_handler(CommandHandler("ref",     cmd_ref))
    app_.add_handler(CommandHandler("admin",   cmd_admin))
    app_.add_handler(CommandHandler("add_premium",    cmd_add_premium))
    app_.add_handler(CommandHandler("remove_premium", cmd_remove_premium))
    app_.add_handler(CommandHandler("broadcast",      cmd_broadcast))
    app_.add_handler(CommandHandler("buy",    cmd_buy))
    app_.add_handler(CommandHandler("models", cmd_models))
    app_.add_handler(CommandHandler("mode",   cmd_mode))
    app_.add_handler(CommandHandler("help",   cmd_help))

    # –∫–Ω–æ–ø–∫–∞/–∫–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    app_.add_handler(CallbackQueryHandler(on_img_btn, pattern=r"^img$"))
    app_.add_handler(CommandHandler("img", cmd_img))

    # –∫–Ω–æ–ø–∫–∏
    app_.add_handler(CallbackQueryHandler(on_buy_btn,      pattern=r"^buy$"))
    app_.add_handler(CallbackQueryHandler(on_profile_btn,  pattern=r"^profile$"))
    app_.add_handler(CallbackQueryHandler(on_ref_btn,      pattern=r"^ref$"))
    app_.add_handler(CallbackQueryHandler(on_models_btn,   pattern=r"^models$"))
    app_.add_handler(CallbackQueryHandler(on_models_view_toggle, pattern=r"^mvis:(short|full)$"))
    app_.add_handler(CallbackQueryHandler(on_model_visual_select, pattern=r"^mvis:sel:.+$"))
    app_.add_handler(CallbackQueryHandler(on_modes_btn,    pattern=r"^modes$"))
    app_.add_handler(CallbackQueryHandler(on_mode_select,  pattern=r"^mode:(default|coding|seo|translate|summarize|creative)$"))
    app_.add_handler(CallbackQueryHandler(
        lambda u, c: u.callback_query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard()),
        pattern=r"^home$"
    ))

    # —Å–æ–æ–±—â–µ–Ω–∏—è
    app_.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))

    # error-handler
    app_.add_error_handler(on_error)

    return app_

@app.on_event("startup")
async def on_startup():
    global application, _public_url
    await init_db()

    application = build_application()
    await application.initialize()
    await application.start()

    _public_url = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("PUBLIC_URL")
    if not _public_url:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω PUBLIC_URL/RENDER_EXTERNAL_URL")

    webhook_url = f"{_public_url.rstrip('/')}/tg"
    await application.bot.set_webhook(webhook_url, max_connections=40, drop_pending_updates=False)
    logger.info("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Telegram webhook: %s", webhook_url)

    threading.Thread(target=_keepalive_loop, daemon=True).start()
    asyncio.get_event_loop().create_task(_webhook_guard_loop())
    asyncio.get_event_loop().create_task(_premium_expiry_notifier_loop())

    logger.info("üöÄ Startup complete. Listening on port %s", PORT)

@app.on_event("shutdown")
async def on_shutdown():
    _keepalive_stop.set()
    try:
        if application is not None:
            # –í–ê–ñ–ù–û: –ù–ï —Å–Ω–∏–º–∞–µ–º webhook ‚Äî –∏–Ω–∞—á–µ Telegram –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –±—É–¥–∏—Ç—å Render!
            await application.stop()
            await application.shutdown()
    finally:
        logger.info("üõë Shutdown complete")

# =========================
# –ó–∞–ø—É—Å–∫
# =========================
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=PORT)

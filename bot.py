import os
import logging
import asyncio
import threading
from datetime import datetime, timedelta

import requests
from dotenv import load_dotenv
from fastapi import FastAPI, Request
import uvicorn

from openai import OpenAI
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, ApplicationBuilder,
    CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters,
)

# =========================
# –ö–æ–Ω—Ñ–∏–≥
# =========================
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
OPENAI_KEY = os.getenv("OPENAI_KEY", "")
DEEPSEEK_KEY = os.getenv("DEEPSEEK_KEY", "")
CRYPTOPAY_KEY = os.getenv("CRYPTOPAY_KEY", "")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
PORT = int(os.getenv("PORT", "10000"))

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –ø—É—Å—Ç")
if not OPENAI_KEY:
    raise RuntimeError("OPENAI_KEY –ø—É—Å—Ç")

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
logger = logging.getLogger("neurobot")

# =========================
# –ú–æ–¥–µ–ª–∏ (–≤–∏–∑—É–∞–ª—å–Ω—ã–µ)
# =========================
MODEL_OPENAI = "OpenAI ¬∑ GPT-4o-mini"
MODEL_DEEPSEEK = "DeepSeek ¬∑ Chat"
DEFAULT_MODEL = MODEL_OPENAI

_user_model_visual: dict[int, str] = {}
_user_model: dict[int, str] = {}

# =========================
# –ö–ª–∏–µ–Ω—Ç OpenAI
# =========================
oai = OpenAI(api_key=OPENAI_KEY)

# =========================
# DB helpers
# =========================
from db import (
    init_db, add_user, is_premium, can_send_message, set_premium,
    get_usage_today, get_free_credits, consume_free_credit, add_free_credits,
    set_referrer_if_empty, count_paid_users_today, count_paid_users_total
)

# =========================
# FastAPI & PTB
# =========================
app = FastAPI(title="NeuroBot API")
application: Application | None = None
_public_url: str | None = None
_keepalive_stop = threading.Event()

REF_BONUS = 25
DAILY_LIMIT = 5

# =========================
# LLM
# =========================
def ask_llm(user_id: int, prompt: str) -> str:
    r = oai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
    )
    return r.choices[0].message.content


# =========================
# UI
# =========================
def main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üß† –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="models")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="ref")],
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")],
    ])

# ---------- –º–æ–¥–µ–ª–∏ ----------
def _models_text_short() -> str:
    return (
        "üîπ <b>Claude 4.5 Sonnet</b> ‚Äî —É–º–Ω—ã–π –∏ —Ç–æ—á–Ω—ã–π\n"
        "üî∏ <b>GPT-5</b> ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π\n"
        "‚ö° <b>Gemini 2.5 Pro</b> ‚Äî –±—ã—Å—Ç—Ä–∞—è –∏ –ª–æ–≥–∏—á–Ω–∞—è\n"
        "üß© <b>OpenAI o3</b> ‚Äî –æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è –∫–æ–¥–∞\n"
        "üß† <b>DeepSeek V3.2</b> ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ñ–∞–∫—Ç—ã\n"
        "üöÄ <b>GPT-4o mini</b> ‚Äî –ª—ë–≥–∫–∏–π –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∏–∂–µ üëá"
    )

def _models_text_full() -> str:
    return (
        "<b>üìà –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π</b>\n\n"
        "üîπ <b>Claude 4.5 Sonnet</b>\n"
        "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å –∂–∏–≤—ã–º —Å—Ç–∏–ª–µ–º —Ä–µ—á–∏. –û—Ç–ª–∏—á–Ω–æ –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç—ã, —Å—Ü–µ–Ω–∞—Ä–∏–∏, —Å—Ç–∞—Ç—å–∏.\n\n"
        "üî∏ <b>GPT-5</b>\n"
        "–ì–ª–∞–≤–Ω–∞—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å. –õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å. "
        "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á ‚Äî –æ—Ç –∫–æ–¥–∞ –¥–æ —ç—Å—Å–µ.\n\n"
        "‚ö° <b>Gemini 2.5 Pro</b>\n"
        "–û—Ç–ª–∏—á–∞–µ—Ç—Å—è —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å—é. –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å —Ñ–∞–∫—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "üß© <b>OpenAI o3</b>\n"
        "–¢–æ—á–µ–Ω –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –∏ –∫–æ–¥–µ. –û—Ç–ª–∏—á–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ API.\n\n"
        "üß† <b>DeepSeek V3.2</b>\n"
        "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ, –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö. –õ–∞–∫–æ–Ω–∏—á–µ–Ω –∏ —Å—Ç—Ä–æ–≥.\n\n"
        "üöÄ <b>GPT-4o mini</b>\n"
        "–°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏ –ª—ë–≥–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —á–∞—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é –º–æ–¥–µ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ üëá"
    )

def models_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìã –ö—Ä–∞—Ç–∫–æ", callback_data="models_short"),
         InlineKeyboardButton("üìà –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="models_full")],
        [InlineKeyboardButton("Claude 4.5 Sonnet", callback_data="sel:Claude 4.5 Sonnet")],
        [InlineKeyboardButton("GPT-5", callback_data="sel:GPT-5")],
        [InlineKeyboardButton("Gemini 2.5 Pro", callback_data="sel:Gemini 2.5 Pro")],
        [InlineKeyboardButton("OpenAI o3", callback_data="sel:OpenAI o3")],
        [InlineKeyboardButton("DeepSeek V3.2", callback_data="sel:DeepSeek V3.2")],
        [InlineKeyboardButton("GPT-4o mini", callback_data="sel:GPT-4o mini")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")],
    ])

# ---------- /start ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await add_user(user.id)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏
    ref_id = None
    if context.args and context.args[0].startswith("ref_"):
        try:
            ref_id = int(context.args[0].split("ref_")[1])
        except Exception:
            pass
    if ref_id and ref_id != user.id:
        try:
            first_bind = await set_referrer_if_empty(user.id, ref_id)
            if first_bind:
                await add_free_credits(ref_id, REF_BONUS)
                await application.bot.send_message(
                    chat_id=ref_id,
                    text=f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n+{REF_BONUS} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫!"
                )
        except Exception as e:
            logger.warning("ref attach failed: %s", e)

    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–µ–π—Ä–æ–±–æ—Ç ü§ñ\n\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {DAILY_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å (+ —Ä–µ—Ñ. –±–æ–Ω—É—Å—ã).\n"
        "–ü—Ä–µ–º–∏—É–º ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –æ—á–µ—Ä–µ–¥–µ–π.\n\n"
        "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá"
    )
    await update.message.reply_text(text, reply_markup=main_keyboard())

# ---------- –ø—Ä–æ—Ñ–∏–ª—å ----------
async def _render_profile_html(user_id: int) -> str:
    prem = await is_premium(user_id)
    used_today = await get_usage_today(user_id)
    bonus = await get_free_credits(user_id)
    me = await application.bot.get_me()
    deep_link = f"https://t.me/{me.username}?start=ref_{user_id}"

    if prem:
        status = "–ü—Ä–µ–º–∏—É–º"
        left_text = "‚àû (–±–µ–∑–ª–∏–º–∏—Ç)"
        async with await aiosqlite.connect(os.getenv("DATABASE_PATH", "/tmp/neurobot.sqlite3")) as db:
            cur = await db.execute("SELECT expires_at FROM premiums WHERE user_id=?", (user_id,))
            row = await cur.fetchone()
            expires = row[0][:10] if row else "-"
    else:
        status = "–û–±—ã—á–Ω—ã–π"
        left_day = max(0, DAILY_LIMIT - used_today)
        total_left = left_day + bonus
        left_text = f"{total_left} (–¥–Ω–µ–≤–Ω–æ–π {left_day} + –±–æ–Ω—É—Å–æ–≤ {bonus})"
        expires = "-"

    visual = _user_model_visual.get(user_id, "GPT-4o mini")

    return (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"ID: <code>{user_id}</code>\n"
        f"–°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
        f"–ê–∫—Ç–∏–≤–µ–Ω –¥–æ: <b>{expires}</b>\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞—è–≤–æ–∫: <b>{left_text}</b>\n"
        f"–ú–æ–¥–µ–ª—å: <b>{visual}</b>\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{deep_link}\n"
        f"+{REF_BONUS} –∑–∞—è–≤–æ–∫ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ!"
    )

async def on_profile_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    txt = await _render_profile_html(q.from_user.id)
    await q.message.edit_text(txt, parse_mode="HTML", reply_markup=main_keyboard())

# ---------- –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ ----------
async def on_models_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    text = _models_text_short()
    await q.message.edit_text(text, parse_mode="HTML", reply_markup=models_keyboard())

async def on_models_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if q.data == "models_full":
        text = _models_text_full()
    else:
        text = _models_text_short()
    await q.message.edit_text(text, parse_mode="HTML", reply_markup=models_keyboard())

async def on_model_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    label = q.data.split("sel:")[1]
    _user_model_visual[q.from_user.id] = label
    _user_model[q.from_user.id] = MODEL_DEEPSEEK if "DeepSeek" in label else MODEL_OPENAI
    await q.message.edit_text(f"‚úÖ –ú–æ–¥–µ–ª—å ¬´{label}¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n–ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!", reply_markup=main_keyboard())

# ---------- —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ ----------
async def _render_referral_html(user_id: int) -> str:
    me = await application.bot.get_me()
    link = f"https://t.me/{me.username}?start=ref_{user_id}"
    return (
        "üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ +{REF_BONUS} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{link}"
    )

async def on_ref_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    txt = await _render_referral_html(q.from_user.id)
    await q.message.edit_text(txt, parse_mode="HTML", reply_markup=main_keyboard())

# ---------- –æ–ø–ª–∞—Ç–∞ ----------
async def on_buy_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not CRYPTOPAY_KEY:
        await q.message.reply_text("üí≥ –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")
        return

    payload = str(q.from_user.id)
    headers = {"Crypto-Pay-API-Token": CRYPTOPAY_KEY}
    data = {"asset": "USDT", "amount": "3", "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π", "payload": payload}
    r = requests.post("https://pay.crypt.bot/api/createInvoice", json=data, headers=headers, timeout=15)
    url = r.json()["result"]["pay_url"]

    msg = (
        "üí≥ <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
        "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º\n"
        "‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤\n"
        "üìÖ –°—Ä–æ–∫ ‚Äî 30 –¥–Ω–µ–π\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî 3 USDT\n\n"
        f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ üëá\n{url}"
    )
    await q.message.reply_text(msg, parse_mode="HTML")

# ---------- —Å–æ–æ–±—â–µ–Ω–∏—è ----------
async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text or ""

    if await is_premium(user_id):
        reply = ask_llm(user_id, text)
        await update.message.reply_text(reply)
        return

    if await can_send_message(user_id, DAILY_LIMIT):
        reply = ask_llm(user_id, text)
        await update.message.reply_text(reply)
        return

    if await consume_free_credit(user_id):
        reply = ask_llm(user_id, text)
        await update.message.reply_text(reply)
        return

    await update.message.reply_text(
        f"üö´ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω.\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å +{REF_BONUS} —Å–æ–æ–±—â–µ–Ω–∏–π "
        "–∏–ª–∏ –∫—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞."
    )

# ---------- webhook CryptoPay ----------
@app.post("/cryptopay-webhook")
async def cryptopay_webhook(request: Request):
    global application
    data = await request.json()
    user_id = None

    if data.get("update_type") == "invoice_paid":
        try:
            user_id = int(data["payload"]["payload"])
        except Exception:
            pass

    if user_id:
        expires = (datetime.now() + timedelta(days=30)).isoformat()
        await set_premium(user_id, expires)
        await application.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {datetime.now().strftime('%d.%m.%Y')}.",
        )

    return {"ok": True}

# ---------- —Å–∏—Å—Ç–µ–º–Ω–æ–µ ----------
@app.on_event("startup")
async def on_startup():
    global application, _public_url
    await init_db()
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CallbackQueryHandler(on_profile_btn, pattern="^profile$"))
    application.add_handler(CallbackQueryHandler(on_ref_btn, pattern="^ref$"))
    application.add_handler(CallbackQueryHandler(on_models_btn, pattern="^models$"))
    application.add_handler(CallbackQueryHandler(on_models_toggle, pattern="^models_(short|full)$"))
    application.add_handler(CallbackQueryHandler(on_model_select, pattern="^sel:"))
    application.add_handler(CallbackQueryHandler(on_buy_btn, pattern="^buy$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))
    await application.initialize()
    await application.start()

    _public_url = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("PUBLIC_URL")
    webhook_url = f"{_public_url.rstrip('/')}/tg"
    await application.bot.set_webhook(webhook_url)
    logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", webhook_url)

@app.on_event("shutdown")
async def on_shutdown():
    _keepalive_stop.set()
    if application:
        await application.stop()
        await application.shutdown()

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=PORT)

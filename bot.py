import os
import logging
from datetime import datetime, timedelta
from threading import Thread

import requests
from dotenv import load_dotenv
from fastapi import FastAPI, Request
import uvicorn

from openai import OpenAI

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# --------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–ª–∏–µ–Ω—Ç—ã
# --------------------
load_dotenv()

BOT_TOKEN      = os.getenv("BOT_TOKEN", "")
OPENAI_KEY     = os.getenv("OPENAI_KEY", "")
CRYPTOPAY_KEY  = os.getenv("CRYPTOPAY_KEY")  # –º–æ–∂–µ—Ç –±—ã—Ç—å None (–ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏)
PORT           = int(os.getenv("PORT", "10000"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –ø—É—Å—Ç. –î–æ–±–∞–≤—å –µ–≥–æ –≤ .env")
if not OPENAI_KEY:
    raise RuntimeError("OPENAI_KEY –ø—É—Å—Ç. –î–æ–±–∞–≤—å –µ–≥–æ –≤ .env")

client = OpenAI(api_key=OPENAI_KEY)

# –ë–î-—É—Ç–∏–ª–∏—Ç—ã
from db import init_db, add_user, is_premium, can_send_message, set_premium  # noqa: E402

# --------------------
# FastAPI (webhook –¥–ª—è CryptoPay)
# --------------------
app = FastAPI(title="NeuroBot API")
# === Webhook –¥–ª—è Telegram ===
@app.post("/tg")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"ok": True}

@app.post("/cryptopay-webhook")
async def cryptopay_webhook(request: Request):
    """
    –û–∂–∏–¥–∞–µ—Ç JSON –æ—Ç CryptoPay –≤–∏–¥–∞:
    {
      "update_id": ...,
      "invoice": {
        "status": "paid",
        "payload": "<telegram_user_id>"
      }
    }
    """
    try:
        data = await request.json()
    except Exception:
        return {"ok": False, "error": "bad json"}

    invoice = data.get("invoice") or {}
    status  = invoice.get("status")
    payload = invoice.get("payload")

    if status == "paid" and payload:
        try:
            user_id = int(payload)
        except Exception:
            user_id = None

        if user_id:
            expires_at = (datetime.now() + timedelta(days=30)).isoformat()
            await set_premium(user_id, expires_at)
            # –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–º–∏—É–º–µ
            try:
                await application.bot.send_message(
                    chat_id=user_id,
                    text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π."
                )
            except Exception:
                pass

    return {"ok": True}

def run_fastapi():
    uvicorn.run(app, host="0.0.0.0", port=PORT)

# --------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# --------------------
def ask_gpt(prompt: str) -> str:
    """
    –í—ã–∑–æ–≤ OpenAI (–º–æ–¥–µ–ª—å –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏).
    """
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
    )
    return resp.choices[0].message.content

# --------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã Telegram
# --------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await add_user(user.id)

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üß† –í—ã–±—Ä–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å (–ø–æ–∫–∞ GPT-4o-mini)", callback_data="neuro")],
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")]
    ])
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–µ–π—Ä–æ–±–æ—Ç ü§ñ\n\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å.\n"
        "–ü—Ä–µ–º–∏—É–º ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –æ—á–µ—Ä–µ–¥–µ–π.\n\n"
        "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=kb
    )

async def on_buy_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not CRYPTOPAY_KEY:
        await query.message.reply_text(
            "üí≥ –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –î–æ–±–∞–≤—å CRYPTOPAY_KEY –≤ .env ‚Äî –∏ —è –≤—ã–¥–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É."
        )
        return

    payload = str(query.from_user.id)
    headers = {"Crypto-Pay-API-Token": CRYPTOPAY_KEY}
    data = {
        "asset": "USDT",
        "amount": "3",
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π",
        "payload": payload
    }
    try:
        r = requests.post("https://pay.crypt.bot/api/createInvoice", json=data, headers=headers, timeout=15)
        j = r.json()
        url = j["result"]["pay_url"]
        await query.message.reply_text(f"üí≥ –û–ø–ª–∞—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å—Å—ã–ª–∫–µ:\n{url}")
    except Exception as e:
        await query.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç: {e}")

async def on_neuro_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ GPT-4o-mini. –í—ã–±–æ—Ä –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ üîß")

async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text or ""

    # –ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    if await is_premium(user_id):
        try:
            reply = ask_gpt(text)
            await update.message.reply_text(reply)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        return

    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç (5/–¥–µ–Ω—å)
    if await can_send_message(user_id, limit=5):
        try:
            reply = ask_gpt(text)
            await update.message.reply_text(reply)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
    else:
        await update.message.reply_text(
            "üö´ –°–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –∏–∑ 5 —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            "–ö—É–ø–∏ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è."
        )

# --------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PTB
# --------------------
async def _startup(app):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∏ –ø–æ–¥–Ω–∏–º–µ–º FastAPI –≤ —Ñ–æ–Ω–µ
    await init_db()
    Thread(target=run_fastapi, daemon=True).start()
    logger.info("‚úÖ –ë–∞–∑–∞ –≥–æ—Ç–æ–≤–∞ –∏ FastAPI –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", PORT)

import asyncio  # –¥–æ–±–∞–≤—å –≤–≤–µ—Ä—Ö—É, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç

def main():
    global application

    # ü©µ –§–∏–∫—Å –¥–ª—è Python 3.14: —Å–æ–∑–¥–∞—ë–º event loop –≤—Ä—É—á–Ω—É—é
    try:
        asyncio.get_running_loop()
    except RuntimeError:
        asyncio.set_event_loop(asyncio.new_event_loop())

    application = ApplicationBuilder() \
        .token(BOT_TOKEN) \
        .post_init(_startup) \
        .build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(on_buy_btn,  pattern="^buy$"))
    application.add_handler(CallbackQueryHandler(on_neuro_btn, pattern="^neuro$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))

    # === –ó–∞–ø—É—Å–∫ —Å webhook (Render) ===
import asyncio
import uvicorn

async def init_bot_and_webhook():
    global application
    await application.initialize()
    await application.start()

    public_url = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("PUBLIC_URL")
    if not public_url:
        raise RuntimeError(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω PUBLIC_URL. –ù–∞ Render –æ–Ω –∑–∞–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. "
            "–õ–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é."
        )

    webhook_url = f"{public_url}/tg"
    await application.bot.set_webhook(webhook_url)
    logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Telegram webhook: {webhook_url}")

if __name__ == "__main__":
    asyncio.run(init_bot_and_webhook())
    uvicorn.run(app, host="0.0.0.0", port=PORT)

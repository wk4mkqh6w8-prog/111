import os
import logging
import asyncio
import threading
from datetime import datetime, timedelta

import requests
from dotenv import load_dotenv
from fastapi import FastAPI, Request
import uvicorn

from openai import OpenAI
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# =========================
# –ö–æ–Ω—Ñ–∏–≥ –∏ –∫–ª–∏–µ–Ω—Ç—ã
# =========================
load_dotenv()

BOT_TOKEN      = os.getenv("BOT_TOKEN", "")
OPENAI_KEY     = os.getenv("OPENAI_KEY", "")
DEEPSEEK_KEY   = os.getenv("DEEPSEEK_KEY", "")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
CRYPTOPAY_KEY  = os.getenv("CRYPTOPAY_KEY", "") # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
ADMIN_ID       = int(os.getenv("ADMIN_ID", "0"))
PORT           = int(os.getenv("PORT", "10000"))

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –ø—É—Å—Ç")
if not OPENAI_KEY:
    raise RuntimeError("OPENAI_KEY –ø—É—Å—Ç")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("neurobot")

# –ú–æ–¥–µ–ª–∏
MODEL_OPENAI = "OpenAI ¬∑ GPT-4o-mini"
MODEL_DEEPSEEK = "DeepSeek ¬∑ Chat"

# –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_MODEL = MODEL_OPENAI

# –ì–ª–æ–±–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω–∞—è LLM –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤ –ø–∞–º—è—Ç—å; –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ë–î, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º–µ–∂–¥—É —Ä–µ—Å—Ç–∞—Ä—Ç–∞–º–∏)
_user_model: dict[int, str] = {}

# OpenAI
oai = OpenAI(api_key=OPENAI_KEY)

# =========================
# –ò–º–ø–æ—Ä—Ç –ë–î-—Ö–µ–ª–ø–µ—Ä–æ–≤
# =========================
# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π db.py –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∏–∂–µ—É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from db import (
    init_db,
    add_user,
    is_premium,
    can_send_message,             # –ª–∏–º–∏—Ç –ø–æ –¥–Ω—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
    set_premium,
    get_usage_today,              # -> int (—Å–∫–æ–ª—å–∫–æ –∏–∑ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ)
    get_free_credits,             # -> int (–±–æ–Ω—É—Å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫)
    consume_free_credit,          # -> bool (—Å–ø–∏—Å–∞—Ç—å 1 –±–æ–Ω—É—Å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å)
    add_free_credits,             # (user_id, n)
    set_referrer_if_empty,        # (user_id, ref_id) -> bool (–ø—Ä–∏–≤—è–∑–∞–ª–∏ –≤–ø–µ—Ä–≤—ã–µ?)
    count_paid_users_today,       # -> int (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
    count_paid_users_total,       # -> int (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
)

# =========================
# FastAPI
# =========================
app = FastAPI(title="NeuroBot API")
application: Application | None = None
_public_url: str | None = None
_keepalive_stop = threading.Event()

# ---------- GPT –≤—ã–∑–æ–≤—ã ----------
def _ask_openai(prompt: str) -> str:
    r = oai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
    )
    return r.choices[0].message.content

def _ask_deepseek(prompt: str) -> str:
    if not DEEPSEEK_KEY:
        return "DeepSeek API key –Ω–µ –∑–∞–¥–∞–Ω (DEEPSEEK_KEY)."
    try:
        # –ø—Ä–æ—Å—Ç–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ (–∏—Ö REST):
        import json, httpx
        url = "https://api.deepseek.com/chat/completions"
        headers = {"Authorization": f"Bearer {DEEPSEEK_KEY}", "Content-Type": "application/json"}
        payload = {
            "model": "deepseek-chat",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.7,
        }
        with httpx.Client(timeout=30) as s:
            resp = s.post(url, headers=headers, json=payload)
            if resp.status_code == 402:
                return "DeepSeek API error 402: Insufficient Balance"
            resp.raise_for_status()
            data = resp.json()
        # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        choice = (data or {}).get("choices", [{}])[0]
        msg = (choice or {}).get("message", {})
        text = msg.get("content") or ""
        return text or "DeepSeek –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ DeepSeek: {e!s}"

def ask_llm(user_id: int, prompt: str) -> str:
    model = _user_model.get(user_id, DEFAULT_MODEL)
    if model == MODEL_DEEPSEEK:
        return _ask_deepseek(prompt)
    return _ask_openai(prompt)

# =========================
# –ö–Ω–æ–ø–∫–∏ –∏ –º–µ–Ω—é
# =========================
def main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üß† –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="models")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")],
    ])

def models_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("OpenAI ¬∑ GPT-4o-mini", callback_data="m:oai")],
        [InlineKeyboardButton("DeepSeek ¬∑ Chat",     callback_data="m:ds")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",            callback_data="home")],
    ])

# =========================
# /start + —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞
# =========================
REF_BONUS = 25
DAILY_LIMIT = 5  # –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await add_user(user.id)

    # deep-link –ø–∞—Ä–∞–º–µ—Ç—Ä
    ref_id = None
    if context.args:
        arg = context.args[0]
        if arg.startswith("ref_"):
            try:
                ref_id = int(arg.split("ref_", 1)[1])
            except Exception:
                ref_id = None

    # –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä ‚Äî –∑–∞–ø–∏—à–µ–º –∏ –Ω–∞—á–∏—Å–ª–∏–º –±–æ–Ω—É—Å—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    if ref_id and ref_id != user.id:
        try:
            first_bind = await set_referrer_if_empty(user.id, ref_id)
            if first_bind:
                await add_free_credits(ref_id, REF_BONUS)
                try:
                    await application.bot.send_message(
                        chat_id=ref_id,
                        text=f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n+{REF_BONUS} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫!"
                    )
                except Exception:
                    pass
        except Exception as e:
            logger.warning("ref attach failed: %s", e)

    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–µ–π—Ä–æ–±–æ—Ç ü§ñ\n\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {DAILY_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å (+ —Ä–µ—Ñ. –±–æ–Ω—É—Å—ã).\n"
        "–ü—Ä–µ–º–∏—É–º ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –æ—á–µ—Ä–µ–¥–µ–π.\n\n"
        "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    await update.message.reply_text(text, reply_markup=main_keyboard())

# =========================
# –ü—Ä–æ—Ñ–∏–ª—å
# =========================
async def _render_profile_text(user_id: int) -> str:
    prem = await is_premium(user_id)
    used_today = await get_usage_today(user_id)  # –∏–∑ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    bonus = await get_free_credits(user_id)
    if prem:
        left_text = "‚àû (–ü—Ä–µ–º–∏—É–º)"
        status = "–ü—Ä–µ–º–∏—É–º"
    else:
        # –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ –¥–Ω–µ–≤–Ω–æ–º—É –ª–∏–º–∏—Ç—É + –±–æ–Ω—É—Å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
        left_day = max(0, DAILY_LIMIT - used_today)
        total_left = left_day + bonus
        left_text = f"{total_left} (–∏–∑ –Ω–∏—Ö –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç {left_day}, –±–æ–Ω—É—Å–æ–≤ {bonus})"
        status = "–û–±—ã—á–Ω—ã–π"
    # —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞
    me = await application.bot.get_me()
    deep_link = f"https://t.me/{me.username}?start=ref_{user_id}"

    return (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n"
        f"ID: `{user_id}`\n"
        f"–°—Ç–∞—Ç—É—Å: **{status}**\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞—è–≤–æ–∫: **{left_text}**\n\n"
        f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{deep_link}\n\n"
        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ: +{REF_BONUS} –∑–∞—è–≤–æ–∫."
    )

async def cmd_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    txt = await _render_profile_text(user_id)
    await update.message.reply_markdown(txt)

async def on_profile_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    txt = await _render_profile_text(q.from_user.id)
    await q.message.edit_text(txt, parse_mode="Markdown", reply_markup=main_keyboard())

# =========================
# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
# =========================
async def on_models_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.edit_text("–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", reply_markup=models_keyboard())

async def on_model_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "m:oai":
        _user_model[q.from_user.id] = MODEL_OPENAI
        await q.message.edit_text("‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: OpenAI ¬∑ GPT-4o-mini", reply_markup=main_keyboard())
    elif q.data == "m:ds":
        _user_model[q.from_user.id] = MODEL_DEEPSEEK
        await q.message.edit_text("‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: DeepSeek ¬∑ Chat", reply_markup=main_keyboard())
    else:
        await q.message.edit_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å.", reply_markup=main_keyboard())

# =========================
# –û–ø–ª–∞—Ç–∞ (CryptoPay)
# =========================
async def on_buy_btn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    if not CRYPTOPAY_KEY:
        await q.message.reply_text("üí≥ –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (–Ω–µ—Ç CRYPTOPAY_KEY).")
        return

    payload = str(q.from_user.id)
    headers = {"Crypto-Pay-API-Token": CRYPTOPAY_KEY}
    data = {
        "asset": "USDT",
        "amount": "3",
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π",
        "payload": payload,
    }
    try:
        r = requests.post(
            "https://pay.crypt.bot/api/createInvoice",
            json=data, headers=headers, timeout=15,
        )
        j = r.json()
        url = j["result"]["pay_url"]
        await q.message.reply_text(f"üí≥ –û–ø–ª–∞—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å—Å—ã–ª–∫–µ:\n{url}")
    except Exception as e:
        await q.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç: {e}")

# =========================
# –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# =========================
async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text or ""

    # –ø—Ä–µ–º–∏—É–º ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    if await is_premium(user_id):
        reply = ask_llm(user_id, text)
        await update.message.reply_text(reply)
        return

    # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
    if await can_send_message(user_id, limit=DAILY_LIMIT):
        reply = ask_llm(user_id, text)
        await update.message.reply_text(reply)
        return

    # –µ—Å–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω ‚Äî –ø—Ä–æ–±—É–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
    if await consume_free_credit(user_id):
        reply = ask_llm(user_id, text)
        await update.message.reply_text(reply)
        return

    # –Ω–µ—Ç –ª–∏–º–∏—Ç–∞ –∏ –±–æ–Ω—É—Å–æ–≤
    await update.message.reply_text(
        "üö´ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω.\n"
        f"‚Äî –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {DAILY_LIMIT}/–¥–µ–Ω—å\n"
        f"‚Äî –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã: –ø–æ–ª—É—á–∏—Ç–µ +{REF_BONUS} –∑–∞—è–≤–æ–∫ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ!\n\n"
        "–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ¬´üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞."
    )

# =========================
# –ê–¥–º–∏–Ω–∫–∞ (–∫–æ—Ä–æ—Ç–∫–∞—è)
# =========================
async def cmd_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ADMIN_ID –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π –∞–¥–º–∏–Ω-–∞–∫–∫–∞—É–Ω—Ç.")
        return
    paid_today = await count_paid_users_today()
    paid_total = await count_paid_users_total()
    await update.message.reply_text(
        "üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        f"–ü–æ–∫—É–ø–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {paid_today}\n"
        f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º–æ–≤: {paid_total}"
    )

# =========================
# Webhooks
# =========================
@app.post("/tg")
async def telegram_webhook(request: Request):
    global application
    if application is None:
        return {"ok": False, "error": "bot not initialized"}
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"ok": True}

@app.post("/cryptopay-webhook")
async def cryptopay_webhook(request: Request):
    global application
    try:
        data = await request.json()
    except Exception:
        return {"ok": False, "error": "bad json"}

    invoice = data.get("invoice") or {}
    status  = invoice.get("status")
    payload = invoice.get("payload")

    if status == "paid" and payload:
        try:
            user_id = int(payload)
        except Exception:
            user_id = None

        if user_id:
            expires_at = (datetime.now() + timedelta(days=30)).isoformat()
            await set_premium(user_id, expires_at)
            try:
                await application.bot.send_message(
                    chat_id=user_id,
                    text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π."
                )
            except Exception:
                pass
    return {"ok": True}

@app.get("/health")
async def health():
    return {"status": "ok", "time": datetime.utcnow().isoformat()}

# =========================
# Keep-alive (40s)
# =========================
def _keepalive_loop():
    if not _public_url:
        return
    url = f"{_public_url.rstrip('/')}/health"
    session = requests.Session()
    # –∫–∞–∂–¥—ã–µ ~40 —Å–µ–∫
    while not _keepalive_stop.wait(40):
        try:
            session.get(url, timeout=8)
        except Exception:
            pass

# =========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# =========================
def build_application() -> Application:
    app_ = ApplicationBuilder().token(BOT_TOKEN).build()
    app_.add_handler(CommandHandler("start", cmd_start))
    app_.add_handler(CommandHandler("profile", cmd_profile))
    app_.add_handler(CommandHandler("admin", cmd_admin))

    app_.add_handler(CallbackQueryHandler(on_buy_btn,      pattern=r"^buy$"))
    app_.add_handler(CallbackQueryHandler(on_profile_btn,  pattern=r"^profile$"))
    app_.add_handler(CallbackQueryHandler(on_models_btn,   pattern=r"^models$"))
    app_.add_handler(CallbackQueryHandler(on_model_select, pattern=r"^m:(oai|ds)$"))
    app_.add_handler(CallbackQueryHandler(lambda u,c: u.callback_query.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard()), pattern=r"^home$"))

    app_.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))
    return app_

@app.on_event("startup")
async def on_startup():
    global application, _public_url

    await init_db()

    application = build_application()
    await application.initialize()
    await application.start()

    _public_url = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("PUBLIC_URL")
    if not _public_url:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω PUBLIC_URL/RENDER_EXTERNAL_URL")

    webhook_url = f"{_public_url.rstrip('/')}/tg"
    await application.bot.set_webhook(webhook_url)
    logger.info("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Telegram webhook: %s", webhook_url)

    threading.Thread(target=_keepalive_loop, daemon=True).start()
    logger.info("üöÄ Startup complete. Listening on port %s", PORT)

@app.on_event("shutdown")
async def on_shutdown():
    _keepalive_stop.set()
    try:
        if application is not None:
            try:
                await application.bot.delete_webhook(drop_pending_updates=False)
            except Exception:
                pass
            await application.stop()
            await application.shutdown()
    finally:
        logger.info("üõë Shutdown complete")

# =========================
# –ó–∞–ø—É—Å–∫
# =========================
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=PORT)
